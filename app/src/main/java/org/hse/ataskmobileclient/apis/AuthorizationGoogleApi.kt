///**
// * AtaskTrackerAPI
// * API for mobile app AtaskTracker
// *
// * OpenAPI spec version: 1.0.0
// *
// *
// * NOTE: This class is auto generated by the swagger code generator program.
// * https://github.com/swagger-api/swagger-codegen.git
// * Do not edit the class manually.
// */
//package io.swagger.client.apis
//
//import io.swagger.client.models.Code
//import io.swagger.client.models.User
//
//import io.swagger.client.infrastructure.*
//
//class AuthorizationGoogleApi(basePath: kotlin.String = "https://virtserver.swaggerhub.com/thinkingabouther2/AtaskTracker/1.0.0") : ApiClient(basePath) {
//
//    /**
//     * Logout from the account
//     *
//     * @return void
//     */
//    fun authGoogleDelete(): Unit {
//
//        val localVariableConfig = RequestConfig(
//                RequestMethod.DELETE,
//                "/auth/google"
//        )
//        val response = request<Any?>(
//                localVariableConfig
//        )
//
//        return when (response.responseType) {
//            ResponseType.Success -> Unit
//            ResponseType.Informational -> TODO()
//            ResponseType.Redirection -> TODO()
//            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
//            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
//        }
//    }
//    /**
//     * Get info of currently logged user
//     *
//     * @return User
//     */
//    @Suppress("UNCHECKED_CAST")
//    fun authGoogleGet(): User {
//
//        val localVariableConfig = RequestConfig(
//                RequestMethod.GET,
//                "/auth/google"
//        )
//        val response = request<User>(
//                localVariableConfig
//        )
//
//        return when (response.responseType) {
//            ResponseType.Success -> (response as Success<*>).data as User
//            ResponseType.Informational -> TODO()
//            ResponseType.Redirection -> TODO()
//            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
//            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
//        }
//    }
//    /**
//     * Authorize against the api with Google OAuth2 token
//     *
//     * @param body  (optional)
//     * @return User
//     */
//    @Suppress("UNCHECKED_CAST")
//    fun authGooglePost(body: Code? = null): User {
//        val localVariableBody: kotlin.Any? = body
//
//        val localVariableConfig = RequestConfig(
//                RequestMethod.POST,
//                "/auth/google"
//        )
//        val response = request<User>(
//                localVariableConfig, localVariableBody
//        )
//
//        return when (response.responseType) {
//            ResponseType.Success -> (response as Success<*>).data as User
//            ResponseType.Informational -> TODO()
//            ResponseType.Redirection -> TODO()
//            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
//            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
//        }
//    }
//}
